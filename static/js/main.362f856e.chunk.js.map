{"version":3,"sources":["components/Square.js","components/Board.js","components/History.js","components/StatusMessage.js","App.js","helpers.js","index.js"],"names":["Square","value","onClick","isWinningSquare","type","className","Board","board","handleSquareClick","winningSquares","renderSquare","position","includes","History","history","moveTo","currentMove","map","_","move","StatusMessage","winner","current","noMovesLeft","every","el","isXNext","NEW_GAME","Array","fill","App","useState","setHistory","setCurrentMove","squares","lines","i","length","a","b","c","calculateWinner","prev","last","newBoard","square","pos","concat","style","fontWeight","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.362f856e.chunk.js","sourcesContent":["import React from 'react';\n\nconst Square = ({ value, onClick, isWinningSquare }) => {\n  return (\n    <button\n      type=\"button\"\n      onClick={onClick}\n      className={`square ${isWinningSquare ? 'winning' : ''} ${\n        value === 'X' ? 'text-green' : 'text-orange'\n      }`}\n    >\n      {value}\n    </button>\n  );\n};\n\nexport default Square;\n","import React from 'react';\nimport Square from './Square';\n\nconst Board = ({ board, handleSquareClick, winningSquares }) => {\n  const renderSquare = position => {\n    const isWinningSquare = winningSquares.includes(position);\n\n    return (\n      <Square\n        value={board[position]}\n        onClick={() => handleSquareClick(position)}\n        isWinningSquare={isWinningSquare}\n      />\n    );\n  };\n\n  return (\n    <div className=\"board\">\n      <div className=\"board-row\">\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(6)}\n        {renderSquare(7)}\n        {renderSquare(8)}\n      </div>\n    </div>\n  );\n};\n\nexport default Board;\n","import React from 'react';\n\nconst History = ({ history, moveTo, currentMove }) => {\n  return (\n    <div className=\"history-wrapper\">\n      <ul className=\"history\">\n        {history.map((_, move) => {\n          return (\n            <li key={move}>\n              <button\n                className={`btn-move ${move === currentMove ? 'active' : ''}`}\n                type=\"button\"\n                onClick={() => {\n                  moveTo(move);\n                }}\n              >\n                {move === 0 ? 'Go to game start' : `Go to move #${move}`}\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default History;\n","import React from 'react';\n\nconst StatusMessage = ({ winner, current }) => {\n  const noMovesLeft = current.board.every(el => el !== null);\n\n  return (\n    <div className=\"status-message\">\n      {winner && (\n        <>\n          Winner is{' '}\n          <span className={winner === 'X' ? 'text-green' : 'text-orange'}>\n            {winner}\n          </span>\n        </>\n      )}\n      {!winner && !noMovesLeft && (\n        <>\n          Next player is{' '}\n          <span className={current.isXNext ? 'text-green' : 'text-orange'}>\n            {current.isXNext ? 'X' : 'O'}{' '}\n          </span>\n        </>\n      )}\n      {!winner && noMovesLeft && (\n        <>\n          <span className=\"text-green\">X</span> and{' '}\n          <span className=\"text-orange\">O</span> tied\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default StatusMessage;\n","import React, { useState } from 'react';\nimport Board from './components/Board';\nimport History from './components/History';\nimport StatusMessage from './components/StatusMessage';\nimport { calculateWinner } from './helpers';\n\nimport './styles/root.scss';\n\nconst NEW_GAME = [{ board: Array(9).fill(null), isXNext: true }];\n\nconst App = () => {\n  const [history, setHistory] = useState(NEW_GAME);\n  const [currentMove, setCurrentMove] = useState(0);\n  const current = history[currentMove];\n\n  const { winner, winningSquares } = calculateWinner(current.board);\n\n  const handleSquareClick = position => {\n    if (current.board[position] || winner) {\n      return;\n    }\n\n    setHistory(prev => {\n      const last = prev[prev.length - 1];\n\n      const newBoard = last.board.map((square, pos) => {\n        if (pos === position) {\n          return last.isXNext ? 'X' : 'O';\n        }\n\n        return square;\n      });\n\n      return prev.concat({ board: newBoard, isXNext: !last.isXNext });\n    });\n\n    setCurrentMove(prev => prev + 1);\n  };\n\n  const moveTo = move => {\n    setCurrentMove(move);\n  };\n\n  const onNewGame = () => {\n    setHistory(NEW_GAME);\n    setCurrentMove(0);\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>\n        TIC <span className=\"text-green\">TAC</span> TOE\n      </h1>\n      <StatusMessage winner={winner} current={current} />\n      <Board\n        board={current.board}\n        handleSquareClick={handleSquareClick}\n        winningSquares={winningSquares}\n      />\n      <button\n        type=\"button\"\n        onClick={onNewGame}\n        className={`btn-reset ${winner ? 'active' : ''}`}\n      >\n        Start new game\n      </button>\n      <h2 style={{ fontWeight: 'normal' }}>Current game history</h2>\n      <History history={history} moveTo={moveTo} currentMove={currentMove} />\n      <div className=\"bg-balls\" />\n    </div>\n  );\n};\n\nexport default App;\n","export function calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return {\n        winner: squares[a],\n        winningSquares: [a, b, c],\n      };\n    }\n  }\n  return {\n    winner: null,\n    winningSquares: [],\n  };\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}